---
// An elegant GitHub contributors component with fallback to repo creator

interface Props {
  owner: string;
  repo: string;
  maxDisplay?: number;
}

// Default shows up to 7 contributors, but this can be customized via the maxDisplay prop
const { owner, repo, maxDisplay = 7 } = Astro.props;
const allContributorsUrl = `https://github.com/${owner}/${repo}/graphs/contributors`;

// Cache function to fetch and cache contributors
async function getContributors() {
  // Only fetch during build time, not during client-side loads
  if (import.meta.env.SSR) {
    try {
      // First try to get contributors
      const apiUrl = `https://api.github.com/repos/${owner}/${repo}/contributors?per_page=${maxDisplay}`;
      const headers = {
        'User-Agent': 'Astro-Starlight-Site',
      };
      
      // Add token if available
      if (import.meta.env.GITHUB_TOKEN) {
        headers['Authorization'] = `token ${import.meta.env.GITHUB_TOKEN}`;
      }
      
      const response = await fetch(apiUrl, { headers });
      
      if (!response.ok) {
        console.warn('Failed to fetch contributors, checking repository info instead');
        // Fallback to repo info to at least get the creator
        return await getRepoCreator(headers);
      }
      
      // Check if the response is empty
      const text = await response.text();
      if (!text || text.trim() === '') {
        console.log('No contributors found, checking repository info instead');
        return await getRepoCreator(headers);
      }
      
      try {
        const data = JSON.parse(text);
        if (Array.isArray(data) && data.length > 0) {
          return data.map(contributor => ({
            username: contributor.login,
            avatar: contributor.avatar_url,
            profile: contributor.html_url,
            contributions: contributor.contributions
          }));
        } else {
          // Empty array, fallback to repo creator
          return await getRepoCreator(headers);
        }
      } catch (parseError) {
        console.error('Error parsing contributors JSON:', parseError);
        return await getRepoCreator(headers);
      }
    } catch (error) {
      console.error('Error fetching contributors:', error);
      return [];
    }
  }
  return [];
}

// Helper function to get repository owner as fallback
async function getRepoCreator(headers) {
  try {
    const repoUrl = `https://api.github.com/repos/${owner}/${repo}`;
    const response = await fetch(repoUrl, { headers });
    
    if (!response.ok) {
      console.error('Failed to fetch repository info:', await response.text());
      return [];
    }
    
    const repoData = await response.json();
    
    // Use owner as the creator/contributor
    if (repoData && repoData.owner) {
      return [{
        username: repoData.owner.login,
        avatar: repoData.owner.avatar_url,
        profile: repoData.owner.html_url,
        contributions: 1, // Default contribution count
        isCreator: true // Flag to indicate this is the creator
      }];
    }
    
    return [];
  } catch (error) {
    console.error('Error fetching repository info:', error);
    return [];
  }
}

// Fetch contributors (will only happen at build time)
const contributors = await getContributors();
---

<div class="contributors-section">
  <h3>Contributors</h3>

  {contributors.length > 0 ? (
    <div class="contributors-grid">
      {contributors.slice(0, maxDisplay).map((contributor) => (
        <a 
          href={contributor.profile} 
          target="_blank" 
          rel="noopener noreferrer"
          class="contributor"
          title={`${contributor.username} ${contributor.isCreator ? '(Repository creator)' : `(${contributor.contributions} contributions)`}`}
        >
          <div class="avatar-wrapper">
            <img 
              src={contributor.avatar} 
              alt={`${contributor.username}'s avatar`} 
              width="40" 
              height="40" 
              loading="lazy" 
            />
          </div>
          <span class="contributor-name">{contributor.username}</span>
        </a>
      ))}
    </div>
  ) : (
    <div class="empty-state">
      <p>No contributors found yet. Be the first to contribute!</p>
      <div class="view-all">
        <a href={`https://github.com/${owner}/${repo}`} target="_blank" rel="noopener noreferrer">
          View repository
        </a>
      </div>
    </div>
  )}
  
  {contributors.length > 0 && (
    <div class="view-all">
      <a href={allContributorsUrl} target="_blank" rel="noopener noreferrer">
        View All â€“ or Become a Contributor!
      </a>
    </div>
  )}
</div>

<style>
  .contributors-section {
    margin: 1.5rem 0;
    padding: 1.25rem;
    border-radius: 0.5rem;
    background-color: var(--sl-color-gray-6);
    border: 1px solid var(--sl-color-gray-5);
    box-shadow: var(--sl-shadow-sm);
    max-width: 100%;
  }

  /* Fix for dark mode visibility */
  h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.05rem;
    text-align: center;
    font-weight: 600;
    color: var(--sl-color-white);
    letter-spacing: 0.01em;
  }
  
  :global(.light) h3 {
    color: var(--sl-color-gray-2);
  }

  .contributors-grid {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .contributor {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    text-decoration: none;
    color: var(--sl-color-gray-3);
    width: 55px;
    transition: transform 0.2s ease;
  }

  .contributor:hover {
    transform: translateY(-2px);
    color: var(--sl-color-accent);
  }

  .avatar-wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 38px;
    height: 38px;
    border-radius: 50%;
    background-color: var(--sl-color-black);
    margin-bottom: 0.4rem;
    overflow: hidden;
    border: 1px solid var(--sl-color-gray-5);
    transition: all 0.2s ease;
  }

  .contributor:hover .avatar-wrapper {
    border-color: var(--sl-color-accent);
  }

  .contributor img {
    border-radius: 50%;
    width: 36px;
    height: 36px;
    display: block;
    transition: transform 0.3s ease;
  }

  .contributor:hover img {
    transform: scale(1.05);
  }

  .contributor-name {
    font-size: 0.75rem;
    font-weight: 400;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: 100%;
    transition: color 0.2s ease;
    line-height: 1.2;
    margin-top: 0.2rem;
  }
  
  :global(.dark) .contributor-name {
    color: var(--sl-color-gray-3);
  }
  
  :global(.light) .contributor-name {
    color: var(--sl-color-gray-2);
  }
  
  .contributor:hover .contributor-name {
    color: var(--sl-color-accent);
  }

  .empty-state {
    text-align: center;
    padding: 1rem 0;
    color: var(--sl-color-gray-3);
    font-size: 0.95rem;
  }

  .empty-state p {
    margin-bottom: 1rem;
  }

  .view-all {
    margin-top: 0.6rem;
    text-align: center;
    font-size: 0.8rem;
  }

  .view-all a {
    color: var(--sl-color-accent);
    text-decoration: none;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    transition: all 0.2s ease;
    display: inline-block;
  }

  .view-all a:hover {
    text-decoration: underline;
    color: var(--sl-color-accent-high);
  }
</style>
